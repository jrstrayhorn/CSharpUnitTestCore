====Introduction

- How to unit test class that depends on external resources
- Unit tests should not touch external resources
- if it does, that is an integration test
- test the logic in a class while excluding dependency on external resources
- principle
    - have a video service class that uses File class, uses Dbcontext class
    - extneral reousrce
    - to unit test, need to do surgery to decouple VideoService from File class, DbContext class
    - this way when unit test, can replace File class with another class that doesn't do anything
    - fake/test double - class that doesn't do anything, replaces the dependent class
    - how to do that surgery??

===Loosely-coupled and Testable Code

- Most legacy applications are built without unit testing... 
- in order to unit test, have to refactor towards testable, Loosely coupled design
- loosely coupled design is one where you can replace objects with another at run time
- Object talk to external resources
- can replace with test double
- 3 Steps
- 1. Extract code/logic that uses an external resource into a separate class
    - isolate from rest of code
- 2. Extract an interface from that code (a contract)
    - simply tell that another class implements that contract   
    - IFileReader -> FileReader / FakeFileReader
- 3. Modify the class under test to use the interface instead of concrete implementation
    - will depend on interface only
- now class is loosely coupled and tested
- In practice that means we should remove instances in the code where we use the new operator
- Example
public void MyMethod()
{
    // when you use new you are making your class tightly coupled to a given implementation
    // no way to replace with a fake object
    var reader = new FileReader(); // should remove this!!
    reader.Read();
}

// one way to do this is to pass in the dependecy as a parameter to the method
// or in the constructor via dependency injection
public void MyMethod(IFileReader reader)
{
    reader.Read();
}

not can provide a different implementation

Production code - real implementation
Test code - fake implementation

dependency injection - we inject dependency from the outside
    - inject / supply dependency from the outside
    - now class is loosely coupled and testable

==Mocking Frameworks
    - use these to setup your mocks/fake/stubs so each time you run time you can set the state that you need objects in
    - Different Frameworks
        - **Moq, NSubstitute, FakeItEasy, Rhino Mocks, - is the prefered one
        - Need to add Moq to unit testing project

==State-based vs Interaction testing
    - State-based testing 
        - Assert that methods return the right thing or object in the right state
        - by testing the state changes
    - Interaction testing
        - dealing with code that touch external resources
        - we need to verify that class we're testing interacts with antoerh class correctly
        - For example,
            - PlaceOrder method in OrderService that needs to Store the order somewhere we don't care
                _storage.Store(order);
                database, cloud _storage
            - one unit test, verify that orderService interacts with the Storage object properly
            - so check that code calls the storage method of the Store object with the right argument (order object)
        - only do this testing when dealing with EXTERNAL RESOURCES - file system, database, api call, etc
        - interaction testing - starts to couple with implementation
            - as you refactor and resturcute you might move stuff arounda nd break tests
        - we should be testing the external behavior NOT THE IMPLEMENTATION (because that can change over time!!)
    - prefer state-based, only use interaction when dealing with external resources

==Fake as Little as Possible
    - when you mock all dependecies you have problems
        - explosion of interfaces - that serve no purposes
        - explosion of constructor parameters - mocking dependency that don't need
        - fat tests - b/c have so many mock objects
        - fragile tests - tightly coupled to design - will break b/c don't test external 
    - use mocks as little as Possible
    - only deal with external resources - otherwise test slow, break often
    - For example,
        - Your Code ----> Web Service (you don't want to call real web service during unit testing)
        - Unit tests should be fast
        - Use mock to remove external resource to web service
    - Exception - when code have complex logic and multiple execution paths
        - ClassA.MethodA() ----> ClassB.MethodB()
            - nether have external rosource
            - if you test together, might have lots of tests across the execution paths
            - in this case it's ok to Mock so you can test ClassA in isolation of ClassB and vice versa
            - test ClassA then Mock for ClassB - to have fewer unit tests

Who should write tests?
- Writing unit and integration tests is the job of a software developer
- should write a suite of unit/integration tests for the code that YOU WROTE
- in a team environment you should absolutely write your own unit/integration tests
- end-to-end tests are written by testers

    

